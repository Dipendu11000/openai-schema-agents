import json
import uuid
import boto3

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('restaurant_bookings')


def get_named_parameter(event, name):
    """
    Get a parameter from the lambda event
    """
    return next(item['value'] for item in event.get('parameters', []) if item['name'] == name)


def get_booking_details(booking_id):
    """
    Retrieve details of a restaurant booking
    """
    try:
        response = table.get_item(Key={'booking_id': booking_id})
        if 'Item' in response:
            return response['Item']
        else:
            return {'message': f'No booking found with ID {booking_id}'}
    except Exception as e:
        return {'error': str(e)}


def create_booking(date, name, hour, num_guests):
    """
    Create a new restaurant booking
    """
    try:
        booking_id = str(uuid.uuid4())[:8]
        table.put_item(
            Item={
                'booking_id': booking_id,
                'date': date,
                'name': name,
                'hour': hour,
                'num_guests': num_guests
            }
        )
        return {'booking_id': booking_id}
    except Exception as e:
        return {'error': str(e)}


def delete_booking(booking_id):
    """
    Delete an existing restaurant booking
    """
    try:
        response = table.delete_item(Key={'booking_id': booking_id})
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return {'message': f'Booking with ID {booking_id} deleted successfully'}
        else:
            return {'message': f'Failed to delete booking with ID {booking_id}'}
    except Exception as e:
        return {'error': str(e)}


def lambda_handler(event, context):
    print("Incoming event:", json.dumps(event))  # Debugging

    action_group = event.get('actionGroup', '')
    function_name = event.get('function', '')
    parameters = event.get('parameters', [])
    message_version = event.get('messageVersion', '1.0')

    response_body = {}

    try:
        if function_name == 'get_booking_details':
            booking_id = get_named_parameter(event, "booking_id")
            if booking_id:
                result = get_booking_details(booking_id)
                response_body = {'TEXT': {'body': json.dumps(result)}}
            else:
                response_body = {'TEXT': {'body': 'Missing booking_id parameter'}}

        elif function_name == 'create_booking':
            date = get_named_parameter(event, "date")
            name = get_named_parameter(event, "name")
            hour = get_named_parameter(event, "hour")
            num_guests = get_named_parameter(event, "num_guests")

            if date and name and hour and num_guests:
                result = create_booking(date, name, hour, int(num_guests))
                response_body = {'TEXT': {'body': json.dumps(result)}}
            else:
                response_body = {'TEXT': {'body': 'Missing required parameters'}}

        elif function_name == 'delete_booking':
            booking_id = get_named_parameter(event, "booking_id")
            if booking_id:
                result = delete_booking(booking_id)
                response_body = {'TEXT': {'body': json.dumps(result)}}
            else:
                response_body = {'TEXT': {'body': 'Missing booking_id parameter'}}

        else:
            response_body = {'TEXT': {'body': 'Invalid function name'}}

    except Exception as e:
        response_body = {'TEXT': {'body': f'Error: {str(e)}'}}

    action_response = {
        'actionGroup': action_group,
        'function': function_name,
        'functionResponse': {
            'responseBody': response_body
        }
    }

    function_response = {
        'response': action_response,
        'messageVersion': message_version
    }

    print("Outgoing response:", json.dumps(function_response))  # Debugging

    return function_response
